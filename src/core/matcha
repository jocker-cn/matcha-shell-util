#!/bin/bash
#
# Brief description of your script
# Copyright 2023 Joker

###################################################################################
# Copyright   2023  matcha工作区相关包路径配置
#工作包路径 一般是安装位置
matcha_work_dir="${MATCHA_WORK}"
#matcha 核心模块位置
matcha_core_work_dir="${matcha_work_dir}/src/core"

env_pre="MATCHA-"
matcha_other_models_dir="$matcha_work_dir/models"
###################################################################################
# Copyright   2023  配置文件相关配置
#配置文件工作目录名称
prop_dir_name="prop"
#配置文件绝对路径
default_prop_dir="${matcha_core_work_dir}/${prop_dir_name}/properties.yml"
#配置文件路径 默认取环境变量 如何不存在则取默认安装位置
prop_file=${MATCHA_PROPS:-"$default_prop_dir")}
#核心模块配置key前缀
matcha_core_model_key_pre="MATCHA-CORE-"
#第三模块配置key前缀
matcha_model_key_pre="MATCHA-"
#配置信息开始标签
matcha_head="<!MATCHA_PROP>"
#配置信息结束标签
matcha_end="</MATCHA_PROP>"

###################################################################################
# Copyright   2023  执行参数
#入参
args=("$@")
#命令调度模块名称
model=
#模块key
model_key=
#模块可执行文件绝对路径
exec_file=
#模块执行入参
exec_args=

###################################################################################
# Copyright   2023  日志模块
log_dir_name="$matcha_core_work_dir/log/log"

abs_pwd="$(pwd)"
abs_path="$(pwd)/$(basename "$0")"

###################################################################################
# Copyright 2023
log_file_dir=${MATCHA_LOG:-"/usr/local/bin/matcha_log"}

source /usr/local/bin/matcha_log

#文件格式校验
function matcha_prop_check() {
  local head_line
  local end_line
  head_line="$(/usr/bin/cat -n "$prop_file" | /usr/bin/grep -n "$matcha_head" | /usr/bin/awk -F ':' '{print $1}')"
  end_line="$(/usr/bin/cat -n "$prop_file" | /usr/bin/grep -n "$matcha_end" | /usr/bin/awk -F ':' '{print $1}')"
  if [[ $head_line = "" ]] || [[ $end_line = "" ]] || [[ ! $head_line < $end_line ]]; then
    echo "$matcha_head" >"$prop_file"
    echo "$matcha_end" >>"$prop_file"
  fi
}

#配置文件校验
function matcha_prop_set() {
  log_info "[${FUNCNAME[0]}] set $prop_file "
  #权限修改

  if [[ ! -f "$prop_file" ]]; then
    log_info "[${FUNCNAME[0]}] create $prop_file"
    sudo /usr/bin/touch "$prop_file"
  fi

  if ! sudo /usr/bin/chmod 660 "$prop_file"; then
    log_error "[${FUNCNAME[0]}] file: $prop_file 'chmod' failed"
    exit 1
  fi

  #文件格式校验
  matcha_prop_check
}

function matcha_install_pre() {
  #prop文件设置
  matcha_prop_set
}

#处理指定model下的所有模块
function prop_loop() {
  #遍历模块的绝对路径
  local abs_model=$1
  #配置模块key前缀
  local key_pre=$2
  #配置模块key完整名称
  local mode_name
  log_info "[${FUNCNAME[0]}] install model directory: $abs_model"
  if [[ ! -d "$abs_model" ]]; then
    abs_model="$matcha_core_work_dir"
    key_pre=$matcha_core_model_key_pre
  fi
  #遍历指定目录下的所有模块
  for file in $(/usr/bin/readlink -f "$abs_model/**"); do
    if [[ -d "$file" ]]; then
      #模块key名称设置
      mode_name="$key_pre$(echo "${file##*/}" | tr '[:lower:]' '[:upper:]')"
      #遍历模块中的controller 如果不存在则直接跳过
      #如果模块中存在多个controller则只取第一个
      log_info "[${FUNCNAME[0]}] deal with $mode_name"
      for file_name in $(/usr/bin/readlink -f "$file/*controller*"); do
        if [[ -f "$file_name" ]]; then
          prop_set "$mode_name=$file_name"
          if [[ ! -x "$file_name" ]]; then
            /usr/bin/chown +x "$file_name"
          fi
          log_info "[${FUNCNAME[0]}] $mode_name installation is complete"
          break
        else
          log_warn "[${FUNCNAME[0]}] $mode_name executable[*controller*] does not exist"
        fi
      done
    fi
  done
}

function matcha_install_core() {
  #遍历指定模块 添加配置信息到配置文件中
  prop_loop "$matcha_core_work_dir" "$matcha_core_model_key_pre"
}

#下载第三方安装文件
function curl_other_models() {
  local download_url=$1

}

#文件权限处理
function other_models_chown() {
  :
}

#模块安装前置处理
function matcha_install_models_pre() {
  #模块名称
  local download_model_name=$1
  #模块下载路径组装
  local download_url=
  #模块下载
  curl_other_models "$download_url"

}
#安装第三方模块
function matcha_install_models() {
  local install_other_model_name=$1

  matcha_install_models_pre "$install_other_model_name"

  #遍历指定模块 添加配置信息到配置文件中
  prop_loop "$matcha_other_models_dir" "$matcha_model_key_pre"
}

function matcha_install_post() {
  #文件权限修改
  if ! sudo /usr/bin/chmod 440 "$prop_file"; then
    log_error "[${FUNCNAME[0]}] file: $prop_file 'chmod' failed"
  fi
  log_info "[${FUNCNAME[0]}] ${#exec_args[1]} installed"
}

#matcha 安装模块  (处理core和第三方models)
function matcha_install() {
  log_info "[${FUNCNAME[0]}] install start"
  matcha_install_pre
  if [[ "${#exec_args[@]}" = 1 ]] || [[ "${#exec_args[1]}" = "core" ]]; then
    log_info "[${FUNCNAME[0]}] core model installation"
    matcha_install_core
  else
    #第三方模块暂不处理
    matcha_install_models "${exec_args}"
  fi
  matcha_install_post
  log_info "[${FUNCNAME[0]}] Install Successfully!!!"
}

#设置模块可执行文件路径
function init_abs_path_exec_file() {
  #已匹配到环境变量中的信息
  if [[ -n "$exec_file" ]]; then
    return 0
  fi
  #配置文件不存在
  if [[ -z "$prop_file" ]] && [[ ! -e "$prop_file" ]]; then
    log_error "[${FUNCNAME[0]}] prop file not exist"
    exit 1
  fi
  #从配置文件中 获取执行文件路径
  exec_file=$(grep "$prop_file" -e "${model_key}" | awk -F '=' '{print $2}')
  if [[ -z "$exec_file" ]]; then
    log_error "[${FUNCNAME[0]}] the current model install failed: $model "
    exit 1
  fi
}

#可执行文件初始化
function exec_file_init() {
  log_info "[${FUNCNAME[0]}] schedule model file: $exec_file"
  if [[ -z $exec_file ]]; then
    init_abs_path_exec_file
  fi
  # 设置执行权限
  if [[ ! -x $exec_file ]]; then
    chmod +x "$exec_file"
  fi

}

# 判断模块是否存在
function mode_exist() {
  local model_name=$1
  #模块名称为空
  if [[ -z "$model_name" ]]; then
    log_error "[${FUNCNAME[0]}] schedule model require not empty string"
    exit 1
  fi
  #请求组合模块
  local req_matcha_key
  #本地模块
  local matcha_key=$env_pre$model
  req_matcha_key=$(grep "$model_name" "$prop_file" | awk -F '=' '{print $1}')

  # 指定的模块不存在
  if [[ ! $req_matcha_key -eq $matcha_key ]]; then
    log_error "the model: $model_name is not exist"
    exit 1
  fi
  #设置模块key
  model_key=$matcha_key
  #从环境中匹配可执行文件路径
  exec_file=${!model_key}
}

#请求入参处理
function request_args() {
  #入参为空
  if [[ ${#args[*]} == 0 ]]; then
    /usr/bin/man matcha
    exit 1
  fi

  model=${args[0]}

  # 安装模块
  if [[ "$model" = "install" ]]; then
    matcha_install
    exit 0
  fi

  log_info "[${FUNCNAME[0]}] schedule request: $model"
  #模块是否存在
  mode_exist "$model"
  #初始化文件路径
  exec_file_init

  #入参设置 exec_args
  local args_len=${#args[@]}
  exec_args=${args[*]:1:$args_len}
}

# 脚本执行
function exec_model_c() {
  log_info "[${FUNCNAME[0]}] exec model: $model, exec file: $exec_file request arguments: $exec_args"
  exec $exec_file "$exec_args"
}

function prop_set() {
  local prop_key_value=$1
  if ! /usr/bin/grep -q "$prop_key_value" "$prop_file"; then
    sudo /usr/bin/sed -i '/'$matcha_head'/a\'"$1"'' "$prop_file"
  fi
}

function exec_opt() {
  request_args
  exec_model_c
}

function main() {
  log_info "[${FUNCNAME[0]}] request args: ${args[*]}"

  if [[ -z "${matcha_work_dir}" ]]; then
    log_info "[${FUNCNAME[0]}] work dir is empty: ${matcha_work_dir}"
    exit 1
  fi

  log_info "[${FUNCNAME[0]}] work dir: ${matcha_work_dir}"
  exec_opt
}
main
